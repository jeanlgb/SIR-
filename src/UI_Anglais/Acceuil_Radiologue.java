/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI_Anglais;

import BD.Gestion_DMR;
import BD.Gestion_examen;
import BD.Gestion_patient;
import NF.*;
import UI.Visu_DMR;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.util.ArrayList;

/**
 *
 * @author camin
 */
public class Acceuil_Radiologue extends JFrame {

    int nblignes;
    Patient patient_courant;
    DMR dmr_courant;
    String s = "";
    ObjetCourant objet_Courant;
    Connection connexion;



    /**
     * Creates new form Acceuil_Radiologue
     */
    public Acceuil_Radiologue(ObjetCourant objet_Courant) {
        this.objet_Courant = objet_Courant;
        connexion = objet_Courant.getConnexion();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Base = new JPanel();
        Jpanel_Head = new JPanel();
        jLabel_Logo = new JLabel();
        jPanel_InfoUser = new JPanel();
        jLabel_UserPost = new JLabel();
        jLabel_Prenom = new JLabel();
        jLabel_Nom = new JLabel();
        jButton_Deconnexion = new JButton();
        jButton_Parametres = new JButton();
        jTabbedPane_Corps = new JTabbedPane();
        jPanel_Corps_Exam = new JPanel();
        jLabel_RecherchePar = new JLabel();
        jComboBox_Recherche = new JComboBox<String>();
        jTextField_Recherche = new JTextField();
        jScrollPane_Corps_Exam_Tab = new JScrollPane();
        jTable_Exam = new JTable();
        jButton_Rechercher = new JButton();
        jButton_Ouvrir = new JButton();
        jButton_Imprimer = new JButton();
        jPanel_Apercu = new JPanel();
        jScrollPane_Apercu = new JScrollPane();
        jTextArea_Apercu = new JTextArea();
        jPanel_DMR = new JPanel();
        jLabel_RechercheParDMR = new JLabel();
        jTextField_RechercheDMR = new JTextField();
        jButton_RechercherDMR = new JButton();
        jComboBox_RechercheDMR = new JComboBox<String>();
        jButton_CreerDMR = new JButton();
        jButton_ImprimerDMR = new JButton();
        jScrollPane_Corps_DMR = new JScrollPane();
        jTable_DMR = new JTable();
        jPanel_ApercuDMR = new JPanel();
        jTextArea_ApercuDMR = new JTextArea();
        jButton_OuvrirDMR = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Radiologist Home");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel_Base.setBackground(new java.awt.Color(127, 144, 160));
        jPanel_Base.setPreferredSize(new java.awt.Dimension(1089, 700));
        jPanel_Base.setLayout(new java.awt.BorderLayout());

        Jpanel_Head.setBackground(new java.awt.Color(127, 144, 160));
        Jpanel_Head.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Jpanel_Head.setPreferredSize(new java.awt.Dimension(1089, 115));

        jLabel_Logo.setIcon(new ImageIcon(getClass().getResource("/UI/Image/medtechs_sansfond_petit.png"))); // NOI18N

        jLabel_UserPost.setText("Radiologist");

        jLabel_Prenom.setText(objet_Courant.getMedecinCourant().getPrenom());

        jLabel_Nom.setText(objet_Courant.getMedecinCourant().getNom());

        jButton_Deconnexion.setText("Log out");
        jButton_Deconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_DeconnexionActionPerformed(evt);
            }
        });

        jButton_Parametres.setText("Parameters");

        GroupLayout jPanel_InfoUserLayout = new GroupLayout(jPanel_InfoUser);
        jPanel_InfoUser.setLayout(jPanel_InfoUserLayout);
        jPanel_InfoUserLayout.setHorizontalGroup(
            jPanel_InfoUserLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_InfoUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_InfoUserLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_UserPost)
                    .addComponent(jLabel_Prenom)
                    .addComponent(jLabel_Nom))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(jPanel_InfoUserLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_Deconnexion, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_Parametres, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_InfoUserLayout.setVerticalGroup(
            jPanel_InfoUserLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel_InfoUserLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel_InfoUserLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel_InfoUserLayout.createSequentialGroup()
                        .addComponent(jButton_Parametres)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_Deconnexion))
                    .addGroup(jPanel_InfoUserLayout.createSequentialGroup()
                        .addComponent(jLabel_Nom, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Prenom, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel_UserPost)))
                .addGap(5, 5, 5))
        );

        GroupLayout Jpanel_HeadLayout = new GroupLayout(Jpanel_Head);
        Jpanel_Head.setLayout(Jpanel_HeadLayout);
        Jpanel_HeadLayout.setHorizontalGroup(
            Jpanel_HeadLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(Jpanel_HeadLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_Logo, GroupLayout.PREFERRED_SIZE, 327, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 507, Short.MAX_VALUE)
                .addComponent(jPanel_InfoUser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        Jpanel_HeadLayout.setVerticalGroup(
            Jpanel_HeadLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(Jpanel_HeadLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel_InfoUser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Jpanel_HeadLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_Logo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel_Base.add(Jpanel_Head, java.awt.BorderLayout.NORTH);
        Jpanel_Head.getAccessibleContext().setAccessibleName("Head_Panel");

        jTabbedPane_Corps.setBackground(new java.awt.Color(127, 144, 160));
        jTabbedPane_Corps.setToolTipText("");
        jTabbedPane_Corps.setPreferredSize(new java.awt.Dimension(1089, 585));
        jTabbedPane_Corps.setVerifyInputWhenFocusTarget(false);

        jPanel_Corps_Exam.setBackground(new java.awt.Color(163, 209, 180));
        jPanel_Corps_Exam.setPreferredSize(new java.awt.Dimension(1089, 585));

        jLabel_RecherchePar.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jLabel_RecherchePar.setText("Search by :");

        jComboBox_Recherche.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jComboBox_Recherche.setModel(new DefaultComboBoxModel<>(new String[] { "Surname", "ID" }));
        jComboBox_Recherche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBox_RechercheActionPerformed(evt);
            }
        });

        jTextField_Recherche.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jTextField_Recherche.setToolTipText("");
        jTextField_Recherche.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_RechercheFocusGained(evt);
            }
        });
        jTextField_Recherche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jTextField_RechercheActionPerformed(evt);
            }
        });
        jTextField_Recherche.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_RechercheKeyTyped(evt);
            }
        });

        jScrollPane_Corps_Exam_Tab.setToolTipText("");

        jTable_Exam.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jTable_Exam.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Room", "Surname", "Exam", "ID Report"
            }
        ) {
            Class[] types = new Class [] {
                String.class, Integer.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Exam.setToolTipText("");
        Font f = new Font("Dialog", Font.PLAIN, 18);
        JTableHeader header = jTable_Exam.getTableHeader();
        header.setFont(f);
        jTable_Exam.getTableHeader().setReorderingAllowed(false);
        jTable_Exam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_ExamMouseClicked(evt);
            }
        });
        jScrollPane_Corps_Exam_Tab.setViewportView(jTable_Exam);
        if (jTable_Exam.getColumnModel().getColumnCount() > 0) {
            jTable_Exam.getColumnModel().getColumn(0).setResizable(false);
            jTable_Exam.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable_Exam.getColumnModel().getColumn(1).setResizable(false);
            jTable_Exam.getColumnModel().getColumn(1).setPreferredWidth(3);
            jTable_Exam.getColumnModel().getColumn(2).setResizable(false);
            jTable_Exam.getColumnModel().getColumn(3).setResizable(false);
            jTable_Exam.getColumnModel().getColumn(4).setResizable(false);
            jTable_Exam.getColumnModel().getColumn(4).setPreferredWidth(2);
        }

        jButton_Rechercher.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jButton_Rechercher.setText("Search for");
        jButton_Rechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_RechercherActionPerformed(evt);
            }
        });

        jButton_Ouvrir.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jButton_Ouvrir.setText("Open");
        jButton_Ouvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_OuvrirActionPerformed(evt);
            }
        });

        jButton_Imprimer.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jButton_Imprimer.setText("Print overview");
        jButton_Imprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_ImprimerActionPerformed(evt);
            }
        });

        jPanel_Apercu.setBackground(new java.awt.Color(163, 209, 180));
        jPanel_Apercu.setBorder(BorderFactory.createTitledBorder(null, "Exam", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 24))); // NOI18N

        jTextArea_Apercu.setColumns(20);
        jTextArea_Apercu.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jTextArea_Apercu.setRows(5);
        jTextArea_Apercu.setText(s);
        jTextArea_Apercu.setLineWrap(true);
        jTextArea_Apercu.setWrapStyleWord(true);
        jScrollPane_Apercu.setViewportView(jTextArea_Apercu);

        GroupLayout jPanel_ApercuLayout = new GroupLayout(jPanel_Apercu);
        jPanel_Apercu.setLayout(jPanel_ApercuLayout);
        jPanel_ApercuLayout.setHorizontalGroup(
            jPanel_ApercuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane_Apercu, GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );
        jPanel_ApercuLayout.setVerticalGroup(
            jPanel_ApercuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane_Apercu, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
        );

        GroupLayout jPanel_Corps_ExamLayout = new GroupLayout(jPanel_Corps_Exam);
        jPanel_Corps_Exam.setLayout(jPanel_Corps_ExamLayout);
        jPanel_Corps_ExamLayout.setHorizontalGroup(
            jPanel_Corps_ExamLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Corps_ExamLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel_Corps_ExamLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_Corps_ExamLayout.createSequentialGroup()
                        .addComponent(jButton_Ouvrir, GroupLayout.PREFERRED_SIZE, 191, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 694, Short.MAX_VALUE)
                        .addComponent(jButton_Imprimer, GroupLayout.PREFERRED_SIZE, 191, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_Corps_ExamLayout.createSequentialGroup()
                        .addGroup(jPanel_Corps_ExamLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_Corps_ExamLayout.createSequentialGroup()
                                .addComponent(jLabel_RecherchePar)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_Recherche, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jTextField_Recherche, GroupLayout.PREFERRED_SIZE, 160, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Rechercher, GroupLayout.PREFERRED_SIZE, 191, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane_Corps_Exam_Tab, GroupLayout.PREFERRED_SIZE, 553, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel_Apercu, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );
        jPanel_Corps_ExamLayout.setVerticalGroup(
            jPanel_Corps_ExamLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Corps_ExamLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel_Corps_ExamLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_Corps_ExamLayout.createSequentialGroup()
                        .addGroup(jPanel_Corps_ExamLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_RecherchePar)
                            .addComponent(jComboBox_Recherche, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_Recherche, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Rechercher))
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane_Corps_Exam_Tab, GroupLayout.PREFERRED_SIZE, 369, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel_Apercu, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel_Corps_ExamLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Ouvrir)
                    .addComponent(jButton_Imprimer))
                .addGap(20, 20, 20))
        );

        jTabbedPane_Corps.addTab("Exam", jPanel_Corps_Exam);

        jPanel_DMR.setBackground(new java.awt.Color(163, 209, 180));
        jPanel_DMR.setPreferredSize(new java.awt.Dimension(1089, 585));

        jLabel_RechercheParDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jLabel_RechercheParDMR.setText("Search by :");

        jTextField_RechercheDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jTextField_RechercheDMR.setToolTipText("");
        jTextField_RechercheDMR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_RechercheDMRFocusGained(evt);
            }
        });
        jTextField_RechercheDMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jTextField_RechercheDMRActionPerformed(evt);
            }
        });

        jButton_RechercherDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jButton_RechercherDMR.setText("Search for");
        jButton_RechercherDMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_RechercherDMRActionPerformed(evt);
            }
        });

        jComboBox_RechercheDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jComboBox_RechercheDMR.setModel(new DefaultComboBoxModel(new String[] { "ID", "Nom" }));
        jComboBox_RechercheDMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBox_RechercheDMRActionPerformed(evt);
            }
        });

        jButton_CreerDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jButton_CreerDMR.setText("Create DMR");
        jButton_CreerDMR.setVisible(false);
        jButton_CreerDMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_CreerDMRActionPerformed(evt);
            }
        });

        jButton_ImprimerDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jButton_ImprimerDMR.setText("Print overview");
        jButton_ImprimerDMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_ImprimerDMRActionPerformed(evt);
            }
        });

        jScrollPane_Corps_DMR.setToolTipText("");

        jTable_DMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jTable_DMR.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "ID", "Surname", "Number Exam"
            }
        ) {
            Class[] types = new Class [] {
                String.class, Integer.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_DMR.setToolTipText("");
        JTableHeader headerbis = jTable_DMR.getTableHeader();
        headerbis.setFont(f);
        jTable_DMR.getTableHeader().setReorderingAllowed(false);
        jTable_DMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_DMRMouseClicked(evt);
            }
        });
        jScrollPane_Corps_DMR.setViewportView(jTable_DMR);

        jPanel_ApercuDMR.setBackground(new java.awt.Color(163, 209, 180));
        jPanel_ApercuDMR.setBorder(BorderFactory.createTitledBorder(null, "DMR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 24))); // NOI18N
        jPanel_ApercuDMR.setMaximumSize(new java.awt.Dimension(399, 401));

        jTextArea_ApercuDMR.setColumns(20);
        jTextArea_ApercuDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jTextArea_ApercuDMR.setRows(5);
        jTextArea_ApercuDMR.setMaximumSize(new java.awt.Dimension(399, 401));
        jTextArea_ApercuDMR.setLineWrap(true);

        GroupLayout jPanel_ApercuDMRLayout = new GroupLayout(jPanel_ApercuDMR);
        jPanel_ApercuDMR.setLayout(jPanel_ApercuDMRLayout);
        jPanel_ApercuDMRLayout.setHorizontalGroup(
            jPanel_ApercuDMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jTextArea_ApercuDMR, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
        );
        jPanel_ApercuDMRLayout.setVerticalGroup(
            jPanel_ApercuDMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel_ApercuDMRLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextArea_ApercuDMR, GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
        );

        jButton_OuvrirDMR.setFont(new Font("Dialog", 0, 16)); // NOI18N
        jButton_OuvrirDMR.setText("Open");
        jButton_OuvrirDMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton_OuvrirDMRActionPerformed(evt);
            }
        });

        GroupLayout jPanel_DMRLayout = new GroupLayout(jPanel_DMR);
        jPanel_DMR.setLayout(jPanel_DMRLayout);
        jPanel_DMRLayout.setHorizontalGroup(
            jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel_DMRLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_DMRLayout.createSequentialGroup()
                        .addComponent(jLabel_RechercheParDMR)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_RechercheDMR, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jTextField_RechercheDMR, GroupLayout.PREFERRED_SIZE, 166, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_RechercherDMR, GroupLayout.PREFERRED_SIZE, 191, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton_OuvrirDMR, GroupLayout.PREFERRED_SIZE, 191, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane_Corps_DMR))
                .addGap(88, 88, 88)
                .addGroup(jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_ApercuDMR, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_DMRLayout.createSequentialGroup()
                        .addComponent(jButton_CreerDMR, GroupLayout.PREFERRED_SIZE, 191, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_ImprimerDMR, GroupLayout.PREFERRED_SIZE, 191, GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel_DMRLayout.setVerticalGroup(
            jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_DMRLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_DMRLayout.createSequentialGroup()
                        .addGroup(jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox_RechercheDMR, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_RechercheParDMR)
                            .addComponent(jTextField_RechercheDMR, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_RechercherDMR))
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane_Corps_DMR, GroupLayout.PREFERRED_SIZE, 369, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel_ApercuDMR, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_DMRLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_CreerDMR)
                        .addComponent(jButton_ImprimerDMR))
                    .addComponent(jButton_OuvrirDMR))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTabbedPane_Corps.addTab("DMR", jPanel_DMR);

        jPanel_Base.add(jTabbedPane_Corps, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel_Base, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ParametresActionPerformed(ActionEvent evt) {
        InterfaceParametreRadiologue allerParametres = new InterfaceParametreRadiologue(objet_Courant);
        this.setVisible(false);
        allerParametres.setVisible(true);
    }

    private void jButton_OuvrirDMRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_OuvrirDMRActionPerformed

        // TODO add your handling code here:
        Visu_DMR DMR = new Visu_DMR(patient_courant, dmr_courant, objet_Courant);
        DMR.setVisible(true);
    }//GEN-LAST:event_jButton_OuvrirDMRActionPerformed

    private void jTable_DMRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_DMRMouseClicked
        // TODO add your handling code here:

        if (jTable_DMR.getSelectedRowCount() > 0) {
            /*

             Code pour apercu exam


             */

        }
        if (evt.getClickCount() == 2) {

            if (jTable_DMR.getSelectedRowCount() > 0) {
                /*
                 Code pour ouvrir exam
                 */
                Examen examen_courant = Gestion_examen.rechercher_Examen(String.valueOf(jTable_DMR.getValueAt(jTable_DMR.getSelectedRow(), 0)), connexion);
//                Crea_Rapport creaRapport = new Crea_Rapport();
//                creaRapport.setPatient_courant(patient_courant);
//                creaRapport.setExamen_courant(examen_courant);

                Visu_DMR visu_dmr = new Visu_DMR(patient_courant, dmr_courant, objet_Courant);
                visu_dmr.setVisible(true);
                //Crea_Rapport creaRapport = new Crea_Rapport(patient_courant, examen_courant, objet_Courant);
                //creaRapport.setVisible(true);
                //System.out.println(examen_courant);
            }
        }
    }//GEN-LAST:event_jTable_DMRMouseClicked

    private void jButton_ImprimerDMRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_ImprimerDMRActionPerformed
        // TODO add your handling code here:
        Impression imprimer = new Impression(jTextArea_ApercuDMR);
        imprimer.print();

    }//GEN-LAST:event_jButton_ImprimerDMRActionPerformed

    private void jButton_CreerDMRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_CreerDMRActionPerformed
        // TODO add your handling code here:

        Crea_DMR newDMR = new Crea_DMR();
        newDMR.setVisible(true);
    }//GEN-LAST:event_jButton_CreerDMRActionPerformed

    private void jComboBox_RechercheDMRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jComboBox_RechercheDMRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_RechercheDMRActionPerformed

    private void jTextField_RechercheDMRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jTextField_RechercheDMRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_RechercheDMRActionPerformed

    private void jTextField_RechercheDMRFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_RechercheDMRFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_RechercheDMRFocusGained

    private void jButton_ImprimerActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_ImprimerActionPerformed
        // TODO add your handling code here:
        //Code imprimer apercu exam

        Impression imprimer = new Impression(jTextArea_Apercu);
        imprimer.print();
    }//GEN-LAST:event_jButton_ImprimerActionPerformed

    private void jButton_OuvrirActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_OuvrirActionPerformed
        // TODO add your handling code here:
        //ouvrir add rapport quand valider changer l'état dans le tableau
        //du coup faire un test avant d'ouvrir savoir si le rapport n'as pas déjà été crée
        // auquel cas c'est ajouter rapport
        // + condition sur le fait qu'un elem du tableau doit être sélectionner

        Examen examen_courant = Gestion_examen.rechercher_Examen(String.valueOf(jTable_Exam.getValueAt(jTable_Exam.getSelectedRow(), 4)), connexion);
        Crea_Rapport creaRapport = new Crea_Rapport(patient_courant, examen_courant, objet_Courant);
//        creaRapport.setPatient_courant(patient_courant);
//        creaRapport.setExamen_courant(examen_courant);
        creaRapport.setVisible(true);


    }//GEN-LAST:event_jButton_OuvrirActionPerformed

    private void jButton_RechercherActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_RechercherActionPerformed
        // TODO add your handling code here:
        // Code recherche
        remplirTable();
    }//GEN-LAST:event_jButton_RechercherActionPerformed

    private void jButton_RechercherDMRActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        // Code recherche

        remplirTableDMR();
    }

    private void remplirTable() {
        DefaultTableModel model = (DefaultTableModel) jTable_Exam.getModel();
        jTable_Exam.removeAll();
        ArrayList<Examen> examens = new ArrayList<Examen>();
        dmr_courant = new DMR(0, null, null);
        if (jComboBox_Recherche.getSelectedItem() == "ID") {
            patient_courant = Gestion_patient.rechercher_patient(jTextField_Recherche.getText(), connexion);
            dmr_courant = Gestion_DMR.rechercher_DMR(Gestion_patient.rechercheIdDMR(patient_courant.getIdentifiant(), connexion), connexion);
        } else if (jComboBox_Recherche.getSelectedItem() == "Surname") { //Gestion_patient.rechercher_par_nom_patient(patient_courant.getNom_d_usage()).getDmr().getId_dmr()
            patient_courant = Gestion_patient.rechercher_par_nom_patient(jTextField_Recherche.getText(), connexion);
            dmr_courant = Gestion_DMR.rechercher_DMR(String.valueOf(patient_courant.getIdentifiant()), connexion);
        }

        examens = Gestion_DMR.recuperer_Examens(String.valueOf(dmr_courant.getId_dmr()));

        //Gestion_patient patient_courant = new Gestion_patient(jTextField_Recherche.getText(),null);
        //Rechercher_Patient patient_courant = new Rechercher_Patient(null,jTextField_Recherche.getText()); faire en fonction de l'état de la combobox un if pour dire qu'on cherche sur le nom ou l'id
        for (int i = 0; i < examens.size(); i++) {
            jTable_Exam.setValueAt(examens.get(i).getDate(), i, 0);
            jTable_Exam.setValueAt(examens.get(i).getIdSalle(), i, 1);
            jTable_Exam.setValueAt(examens.get(i).getMedecin_en_charge().getNom(), i, 2);
            jTable_Exam.setValueAt(examens.get(i).getType_examen(), i, 3);
            jTable_Exam.setValueAt(examens.get(i).getId_examen(), i, 4);
            jTable_Exam.setModel(model);
        }
//        String s = "DMR de " + patient_courant.getNom_d_usage() + " " + patient_courant.getPrenom() + "\n"
//                + patient_courant.getDate_de_naissance() + "\n" + patient_courant.getAdresse() + "\n"
//                + "\n";
//
//        for (int i = 0; i < examens.size(); i++) {
//            s += examens.get(i).toString();
//            s += "\n";
//        }
        jTextArea_Apercu.setText(dmr_courant.getExamens_patient().get(0).toString());
//        s = "";
    }


    private void remplirTableDMR() {
        DefaultTableModel model = (DefaultTableModel) jTable_DMR.getModel();
        jTable_DMR.removeAll();
        ArrayList<DMR> DMRs = new ArrayList<DMR>();
        dmr_courant = new DMR(0, null, null);

        if (jComboBox_RechercheDMR.getSelectedItem() == "ID") {
            patient_courant = Gestion_patient.rechercher_patient(jTextField_RechercheDMR.getText(), connexion);

            dmr_courant = Gestion_DMR.rechercher_DMR(Gestion_patient.rechercheIdDMR(patient_courant.getIdentifiant(), connexion), connexion);

        } else if (jComboBox_RechercheDMR.getSelectedItem() == "Surname") { //Gestion_patient.rechercher_par_nom_patient(patient_courant.getNom_d_usage()).getDmr().getId_dmr()
            patient_courant = Gestion_patient.rechercher_par_nom_patient(jTextField_RechercheDMR.getText(), connexion);
            dmr_courant = Gestion_DMR.rechercher_DMR(String.valueOf(patient_courant.getIdentifiant()), connexion);
        }
        DMR DMRS = Gestion_DMR.rechercher_DMR(Gestion_patient.rechercheIdDMR(patient_courant.getIdentifiant(), connexion), connexion);
        DMRs = Gestion_DMR.recuperer_DMRs(String.valueOf(dmr_courant.getId_dmr()));
        //Gestion_patient patient_courant = new Gestion_patient(jTextField_Recherche.getText(),null);
        //Rechercher_Patient patient_courant = new Rechercher_Patient(null,jTextField_Recherche.getText()); faire en fonction de l'état de la combobox un if pour dire qu'on cherche sur le nom ou l'id
        for (int i = 0; i < DMRs.size(); i++) {
            jTable_DMR.setValueAt(DMRs.get(i).getId_dmr(), i, 0);
            jTable_DMR.setValueAt(DMRs.get(i).getId_patient(), i, 1);
            jTable_DMR.setValueAt(DMRs.get(i).getHistorique_modifications(), i, 2);
            jTable_DMR.setModel(model);
        }
//        String s = "DMR de " + patient_courant.getNom_d_usage() + " " + patient_courant.getPrenom() + "\n" + patient_courant.getDate_de_naissance() + "\n" + patient_courant.getAdresse() + "\n" + "\n";
//
//        for (int i = 0; i < DMRs.size(); i++) {
//            s += DMRs.get(i).toString();
//            s += "\n";
//        }
        jTextArea_ApercuDMR.setText(dmr_courant.getExamens_patient().get(0).toString());
        //s = "";
    }


    private void jTable_ExamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_ExamMouseClicked
        // TODO add your handling code here:
        // Selec pour ouvrir ou apercu d'un exam

        if (jTable_Exam.getSelectedRowCount() > 0) {
            /*
             Code pour apercu exam

             */
 //code pour apercu examen dans l'encadré de droite
            jTextArea_Apercu.setText(dmr_courant.getExamens_patient().get(jTable_Exam.getSelectedRow()).toString());

        }
        if (evt.getClickCount() == 2) {

            if (jTable_Exam.getSelectedRowCount() > 0) {
                /*
                 Code pour ouvrir exam
                 */
                Examen examen_courant = Gestion_examen.rechercher_Examen(String.valueOf(jTable_Exam.getValueAt(jTable_Exam.getSelectedRow(), 4)), connexion);

//                Crea_Rapport creaRapport = new Crea_Rapport();
//                creaRapport.setPatient_courant(patient_courant);
//                creaRapport.setExamen_courant(examen_courant);
                Crea_Rapport creaRapport = new Crea_Rapport(patient_courant, examen_courant, objet_Courant);
                creaRapport.setVisible(true);
                //System.out.println(examen_courant);
            }
        }
    }//GEN-LAST:event_jTable_ExamMouseClicked

    private void jTextField_RechercheActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jTextField_RechercheActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_RechercheActionPerformed

    private void jTextField_RechercheFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_RechercheFocusGained
        // TODO add your handling code here:
        jTextField_Recherche.selectAll();
    }//GEN-LAST:event_jTextField_RechercheFocusGained

    private void jComboBox_RechercheActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jComboBox_RechercheActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_RechercheActionPerformed

    private void jButton_DeconnexionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton_DeconnexionActionPerformed
        // TODO add your handling code here:
        // log Off + open Login page
        int retour = JOptionPane.showConfirmDialog(this, "Do you really want to log out?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (retour == JOptionPane.OK_OPTION) {
            this.dispose(); // ferme la fenetre
            new Login().setVisible(true); // ouvre la fenetre de connection
        }
    }//GEN-LAST:event_jButton_DeconnexionActionPerformed

    private void jTextField_RechercheKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_RechercheKeyTyped
        if (evt.getKeyChar() == '\n') {
            remplirTable();
        }
    }//GEN-LAST:event_jTextField_RechercheKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Window".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Acceuil_Radiologue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Acceuil_Radiologue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Acceuil_Radiologue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Acceuil_Radiologue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Acceuil_Radiologue(objet_Courant).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel Jpanel_Head;
    private JButton jButton_CreerDMR;
    private JButton jButton_Deconnexion;
    private JButton jButton_Imprimer;
    private JButton jButton_ImprimerDMR;
    private JButton jButton_Ouvrir;
    private JButton jButton_OuvrirDMR;
    private JButton jButton_Parametres;
    private JButton jButton_Rechercher;
    private JButton jButton_RechercherDMR;
    private JComboBox<String> jComboBox_Recherche;
    private JComboBox<String> jComboBox_RechercheDMR;
    private JLabel jLabel_Logo;
    private JLabel jLabel_Nom;
    private JLabel jLabel_Prenom;
    private JLabel jLabel_RecherchePar;
    private JLabel jLabel_RechercheParDMR;
    private JLabel jLabel_UserPost;
    private JPanel jPanel_Apercu;
    private JPanel jPanel_ApercuDMR;
    private JPanel jPanel_Base;
    private JPanel jPanel_Corps_Exam;
    private JPanel jPanel_DMR;
    private JPanel jPanel_InfoUser;
    private JScrollPane jScrollPane_Apercu;
    private JScrollPane jScrollPane_Corps_DMR;
    private JScrollPane jScrollPane_Corps_Exam_Tab;
    private JTabbedPane jTabbedPane_Corps;
    private JTable jTable_DMR;
    private JTable jTable_Exam;
    private JTextArea jTextArea_Apercu;
    private JTextArea jTextArea_ApercuDMR;
    private JTextField jTextField_Recherche;
    private JTextField jTextField_RechercheDMR;
    // End of variables declaration//GEN-END:variables
}
